// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: main.proto
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Com.Metacube.Prateek {
  public static partial class SqlService
  {
    static readonly string __ServiceName = "com.metacube.prateek.SqlService";

    static readonly grpc::Marshaller<global::Com.Metacube.Prateek.QueryRequest> __Marshaller_QueryRequest = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Metacube.Prateek.QueryRequest.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Com.Metacube.Prateek.QueryResponse> __Marshaller_QueryResponse = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Com.Metacube.Prateek.QueryResponse.Parser.ParseFrom);

    static readonly grpc::Method<global::Com.Metacube.Prateek.QueryRequest, global::Com.Metacube.Prateek.QueryResponse> __Method_query = new grpc::Method<global::Com.Metacube.Prateek.QueryRequest, global::Com.Metacube.Prateek.QueryResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "query",
        __Marshaller_QueryRequest,
        __Marshaller_QueryResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Com.Metacube.Prateek.MainReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of SqlService</summary>
    public abstract partial class SqlServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Com.Metacube.Prateek.QueryResponse> query(global::Com.Metacube.Prateek.QueryRequest request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for SqlService</summary>
    public partial class SqlServiceClient : grpc::ClientBase<SqlServiceClient>
    {
      /// <summary>Creates a new client for SqlService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public SqlServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for SqlService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public SqlServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected SqlServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected SqlServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Com.Metacube.Prateek.QueryResponse query(global::Com.Metacube.Prateek.QueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return query(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Com.Metacube.Prateek.QueryResponse query(global::Com.Metacube.Prateek.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_query, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Metacube.Prateek.QueryResponse> queryAsync(global::Com.Metacube.Prateek.QueryRequest request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return queryAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Com.Metacube.Prateek.QueryResponse> queryAsync(global::Com.Metacube.Prateek.QueryRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_query, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override SqlServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new SqlServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(SqlServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_query, serviceImpl.query).Build();
    }

  }
}
#endregion
